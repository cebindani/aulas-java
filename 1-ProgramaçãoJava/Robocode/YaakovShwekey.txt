package pd;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Iterator;
import java.util.ArrayList;
import robocode.AdvancedRobot;
import robocode.Bullet;
import robocode.Rules;
import robocode.ScannedRobotEvent;
import robocode.WinEvent;
import robocode.util.Utils;

public class YaakovShwekey extends AdvancedRobot {

    private long ultimaAtualizacao;
    private long ultimaInversao;
    private long ultimoTiro;
    private int direcao;
    private boolean naParede;
    private static final int PROXIMIDADE_PAREDE = 100;
    private static final int PROXIMIDADE_CANTO = 140;
    private static ArrayList armas;
    private ArrayList balas;
    private Movel inimigo;
    private Movel eu;
    public double anguloAnterior;
    public double mudancaDeAngulo;

    @Override
    public void run() {
        this.inicializar();
        this.setBulletColor(Color.WHITE);
        this.setBodyColor(Color.WHITE);
        this.setGunColor(Color.BLUE);
        this.setRadarColor(Color.WHITE);
        this.setScanColor(Color.WHITE);
        this.setBulletColor(Color.WHITE);

        this.setAdjustGunForRobotTurn(true);
        this.setAdjustRadarForGunTurn(true);
        this.setAdjustRadarForRobotTurn(true);

        Rectangle2D.Double campo = new Rectangle2D.Double(0, 0, getBattleFieldWidth(), getBattleFieldHeight());

        this.setTurnRadarRight(Double.POSITIVE_INFINITY);
        for (;;) {
            this.eu.atualizar(this.getX(), this.getY(), this.getVelocity(), this.getHeadingRadians());

            if (this.getTime() - this.ultimaAtualizacao > 6)
                this.setTurnRadarRight(Double.POSITIVE_INFINITY);

            if (inimigo != null) {
                Iterator i = this.balas.iterator();
                while (i.hasNext()) {
                    Movel bala = (Movel) i.next();
                    bala.setLocation(bala.calculaXY(bala.anguloAbsoluto, bala.velocidade));

                    if (bala.distance(inimigo) < 25) {
                        bala.arma.danoTotal += (double) (20 - bala.velocidade) / 3;
                        bala.arma.danoRelativo += (double) (20 - bala.velocidade) / 3;
                        bala.arma.disparos++;
                        i.remove();
                    } else if (!campo.contains(bala)) {
                        bala.arma.danoRelativo -= (double) (20 - bala.velocidade) / 3;
                        bala.arma.disparos++;
                        i.remove();
                    }
                }
            }

            this.execute();
        }
    }

    @Override
    public void onScannedRobot(ScannedRobotEvent e) {
        this.ultimaAtualizacao = this.getTime();

        if (this.inimigo == null)
            this.inimigo = new Movel(this.eu.calculaXY(e.getBearingRadians() + getHeadingRadians(), e.getDistance()), e.getHeadingRadians(), e.getVelocity());
        else if (!(e.getVelocity() == 0 && inimigo.velocidade == e.getVelocity()))
            this.inimigo.atualizar(this.eu.calculaXY(e.getBearingRadians() + getHeadingRadians(), e.getDistance()), e.getVelocity(), e.getHeadingRadians());

        this.mudancaDeAngulo = e.getHeadingRadians() - this.anguloAnterior;
        this.anguloAnterior = e.getHeadingRadians();

        this.radar(e);
        this.mover(e);
        this.atirar(e);
    }

    public void inicializar() {
        if (armas == null) {
            armas = new ArrayList();
            armas.add(new Arma1());
            armas.add(new Arma2());
            armas.add(new Arma3());
            armas.add(new Arma4());
        }

        this.anguloAnterior = 0;
        this.mudancaDeAngulo = 0;
        this.ultimaAtualizacao = 0;
        this.ultimaInversao = 0;
        this.ultimoTiro = -10;
        this.direcao = 1;

        this.balas = new ArrayList();
        this.eu = new Movel(this.getX(), this.getY(), this.getVelocity(), this.getHeading());

        if (this.getX() <= 50 || this.getY() <= 50 || this.getBattleFieldWidth() - this.getX() <= 50 || this.getBattleFieldHeight() - this.getY() <= 50)
            this.naParede = true;
        else
            this.naParede = false;

        this.parede();
    }

    public void radar(ScannedRobotEvent e) {
        double anguloGiro = Utils.normalRelativeAngle(this.getHeadingRadians() + e.getBearingRadians() - this.getRadarHeadingRadians());
        double anguloAjuste = Math.min(Math.atan(42.0 / e.getDistance()), Rules.RADAR_TURN_RATE_RADIANS);
        if (anguloGiro < 0)
            anguloGiro += -anguloAjuste;
        else
            anguloGiro += anguloAjuste;
        this.setTurnRadarRightRadians(anguloGiro);
    }

    public void mover(ScannedRobotEvent e) {
        if (this.getTime() - this.ultimaInversao > 20) {
            direcao *= -1;
            this.ultimaInversao = this.getTime();
        }
        this.parede();
        this.setAhead(this.direcao * Double.POSITIVE_INFINITY);
        if (e.getDistance() < 140)
            this.setTurnRight(e.getBearing() + 90);
        else
            this.setTurnRight(e.getBearing() + 90 - (45 * this.direcao));
    }

    public void atirar(ScannedRobotEvent e) {
        double aux = Double.NEGATIVE_INFINITY;
        Arma escolhida = null;
        Iterator i = armas.iterator();
        while (i.hasNext()) {
            Arma arma = (Arma) i.next();
            if (arma.disparos >= 5 && arma.danoRelativo > aux) {
                aux = arma.danoRelativo;
                escolhida = arma;
            }
        }
        
        Bullet bala = null;
        if (escolhida != null) {
            this.setTurnGunRightRadians(YaakovShwekey.normalizarAngulo(escolhida.getAnguloDoTiro(e, this) - this.getGunHeadingRadians()));
            if (this.getGunTurnRemaining() < 10)
                bala = this.setFireBullet(escolhida.forcaDoTiro(e, this));
        } else
            this.setTurnGunRightRadians(YaakovShwekey.normalizarAngulo(eu.anguloAbsolutoRelativoAOutroMovel(inimigo) - this.getGunHeadingRadians()));

        if (bala != null || (aux == Double.NEGATIVE_INFINITY && this.getTime() - this.ultimoTiro > 8)) {
            i = armas.iterator();
            while (i.hasNext()) {
                Arma arma = (Arma) i.next();
                double forcaDoTiro = arma.forcaDoTiro(e, this);
                if (forcaDoTiro > 0) {
                    Movel novaBala = new Movel(this.getX(), this.getY(), 20.0 - 3.0 * forcaDoTiro, arma.getAnguloDoTiro(e, this));
                    novaBala.arma = arma;
                    this.balas.add(novaBala);
                }
            }

            this.ultimoTiro = this.getTime();
        }
    }

    private void parede() {
        double x = this.getX(), y = this.getY(), fx = this.getBattleFieldWidth() - x, fy = this.getBattleFieldHeight() - y;
        double dc1 = Math.sqrt(x * x + y * y), dc2 = Math.sqrt(fx * fx + y * y), dc3 = Math.sqrt(fx * fx + fy * fy), dc4 = Math.sqrt(x * x + fy * fy);
        if (x > YaakovShwekey.PROXIMIDADE_PAREDE && y > YaakovShwekey.PROXIMIDADE_PAREDE && fx > YaakovShwekey.PROXIMIDADE_PAREDE && fy > YaakovShwekey.PROXIMIDADE_PAREDE && dc1 > YaakovShwekey.PROXIMIDADE_CANTO && dc2 > YaakovShwekey.PROXIMIDADE_CANTO && dc3 > YaakovShwekey.PROXIMIDADE_CANTO && dc4 > YaakovShwekey.PROXIMIDADE_CANTO && this.naParede)
            this.naParede = false;

        if (x <= YaakovShwekey.PROXIMIDADE_PAREDE || y <= YaakovShwekey.PROXIMIDADE_PAREDE || fx <= YaakovShwekey.PROXIMIDADE_PAREDE || fy <= YaakovShwekey.PROXIMIDADE_PAREDE || dc1 <= YaakovShwekey.PROXIMIDADE_CANTO || dc2 <= YaakovShwekey.PROXIMIDADE_CANTO || dc3 <= YaakovShwekey.PROXIMIDADE_CANTO || dc4 <= YaakovShwekey.PROXIMIDADE_CANTO)
            if (this.naParede == false) {
                this.direcao *= -1;
                this.ultimaInversao = this.getTime();
                this.naParede = true;
            }
    }

    private class Movel extends Point2D.Double {

        public double velocidade, anguloAbsoluto;
        public Arma arma;

        public Movel(Movel movel, double velocity, double heading) {
            this.x = movel.x;
            this.y = movel.y;
            this.velocidade = velocity;
            this.anguloAbsoluto = heading;
            this.arma = null;
        }

        public Movel(double x, double y, double velocity, double heading) {
            this.x = x;
            this.y = y;
            this.velocidade = velocity;
            this.anguloAbsoluto = heading;
            this.arma = null;
        }

        public Movel(double x, double y) {
            this.x = x;
            this.y = y;
            this.velocidade = 0;
            this.anguloAbsoluto = 0;
            this.arma = null;
        }

        public void atualizar(Movel movel, double velocity, double heading) {
            this.x = movel.x;
            this.y = movel.y;
            this.velocidade = velocity;
            this.anguloAbsoluto = heading;
        }

        public void atualizar(double x, double y, double velocity, double heading) {
            this.x = x;
            this.y = y;
            this.velocidade = velocity;
            this.anguloAbsoluto = heading;
        }

        public double anguloAbsolutoRelativoAOutroMovel(Movel outro) {
            double angulo = Math.atan2(outro.x - x, outro.y - y);
            while (angulo < 0.0)
                angulo += 2.0 * Math.PI;
            while (angulo >= 2.0 * Math.PI)
                angulo -= 2.0 * Math.PI;
            return angulo;
        }

        public Movel calculaXY(double angulo, double distancia) {
            return new Movel(x + Math.sin(angulo) * distancia, y + Math.cos(angulo) * distancia);
        }
    }

    private static abstract class Arma {

        public double danoTotal, danoRelativo, disparos;

        public final double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo) {
            return this.getAnguloDoTiro(e, robo, this.forcaDoTiro(e, robo));
        }

        protected abstract double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo, double forcaDoTiro);

        public double forcaDoTiro(ScannedRobotEvent enemy, YaakovShwekey robo) {
            return Math.min((double) (400 / enemy.getDistance()), Math.min(3.0, robo.getEnergy() / 2));
        }

        public abstract Color getColor();
    }

    private static class Arma1 extends Arma {

        @Override
        public double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo, double forcaDoTiro) {
            double angAbsolutoNoPlano = e.getBearingRadians() + robo.getHeadingRadians();
            double angAbsolutoInimigo = e.getHeadingRadians();
            double mudancaDeAngulo = robo.mudancaDeAngulo;

            double dTempo = 0;
            double xFuturo = robo.getX() + e.getDistance() * Math.sin(angAbsolutoNoPlano);
            double yFuturo = robo.getY() + e.getDistance() * Math.cos(angAbsolutoNoPlano);
            double velocidadeDoTiro = 20 - 3 * forcaDoTiro;
            while ((++dTempo) * velocidadeDoTiro < Point2D.Double.distance(robo.getX(), robo.getY(), xFuturo, yFuturo)) {
                xFuturo += Math.sin(angAbsolutoInimigo) * e.getVelocity();
                yFuturo += Math.cos(angAbsolutoInimigo) * e.getVelocity();

                angAbsolutoInimigo += mudancaDeAngulo;

                xFuturo = Math.max(Math.min(xFuturo, robo.getBattleFieldWidth() - 18), 18);
                yFuturo = Math.max(Math.min(yFuturo, robo.getBattleFieldHeight() - 18), 18);
            }

            return Utils.normalRelativeAngle(Utils.normalAbsoluteAngle(Math.atan2(xFuturo - robo.getX(), yFuturo - robo.getY())));
        }

        @Override
        public double forcaDoTiro(ScannedRobotEvent enemy, YaakovShwekey robo) {
            return 3;
        }

        public Color getColor() {
            return Color.RED;
        }
    }

    private static class Arma2 extends Arma {

        @Override
        public double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo, double forcaDoTiro) {
            return robo.eu.anguloAbsolutoRelativoAOutroMovel(robo.inimigo);
        }

        public Color getColor() {
            return Color.GREEN;
        }
    }

    private static class Arma3 extends Arma {

        @Override
        public double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo, double forcaDoTiro) {
            double anguloRetilineo = robo.eu.anguloAbsolutoRelativoAOutroMovel(robo.inimigo);
            return anguloRetilineo + Math.asin(robo.inimigo.velocidade / Rules.getBulletSpeed(forcaDoTiro) * Math.sin(robo.inimigo.anguloAbsoluto - anguloRetilineo));
        }

        public Color getColor() {
            return Color.BLUE;
        }
    }

    private static class Arma4 extends Arma {

        @Override
        public double getAnguloDoTiro(ScannedRobotEvent e, YaakovShwekey robo, double forcaDoTiro) {
            double ROBOT_WIDTH = 16, ROBOT_HEIGHT = 16;

            double eAbsBearing = robo.getHeadingRadians() + Math.toRadians(e.getBearing());
            double rX = robo.getX(), rY = robo.getY();
            double bV = Rules.getBulletSpeed(forcaDoTiro);
            double eX = rX + e.getDistance() * Math.sin(eAbsBearing);
            double eY = rY + e.getDistance() * Math.cos(eAbsBearing);
            double eV = e.getVelocity();
            double eHd = Math.toRadians(e.getHeading());

            double A = (eX - rX) / bV;
            double B = eV / bV * Math.sin(eHd);
            double C = (eY - rY) / bV;
            double D = eV / bV * Math.cos(eHd);
            double a = A * A + C * C;
            double b = 2 * (A * B + C * D);
            double c = (B * B + D * D - 1);
            double discrim = b * b - 4 * a * c;

            if (discrim >= 0) {
                double t1 = 2 * a / (-b - Math.sqrt(discrim));
                double t2 = 2 * a / (-b + Math.sqrt(discrim));
                double t = Math.min(t1, t2) >= 0 ? Math.min(t1, t2) : Math.max(t1, t2);
                double endX = limit(eX + eV * t * Math.sin(eHd), ROBOT_WIDTH / 2, robo.getBattleFieldWidth() - ROBOT_WIDTH / 2);
                double endY = limit(eY + eV * t * Math.cos(eHd), ROBOT_HEIGHT / 2, robo.getBattleFieldHeight() - ROBOT_HEIGHT / 2);

                return Math.atan2(endX - rX, endY - rY);
            } else {
                double anguloRetilineo = robo.eu.anguloAbsolutoRelativoAOutroMovel(robo.inimigo);
                return anguloRetilineo + Math.asin(robo.inimigo.velocidade / Rules.getBulletSpeed(forcaDoTiro) * Math.sin(robo.inimigo.anguloAbsoluto - anguloRetilineo));
            }
        }

        private double limit(double value, double min, double max) {
            return Math.min(max, Math.max(min, value));
        }

        public Color getColor() {
            return Color.YELLOW;
        }
    }

    private static double normalizarAngulo(double angulo) {
        while (angulo <= -Math.PI)
            angulo += 2.0 * Math.PI;
        while (angulo > Math.PI)
            angulo -= 2.0 * Math.PI;
        return angulo;
    }

    @Override
    public void onWin(WinEvent e) {
        this.setAhead(0);
        this.execute();
    }

    @Override
    public void onPaint(Graphics2D g) {
        Iterator i = balas.iterator();
        while (i.hasNext()) {
            Movel bala = (Movel) i.next();
            g.setColor(bala.arma.getColor());
            g.fillOval((int) bala.x - 3, (int) bala.y - 3, 6, 6);
        }
        this.out.println("---");
        i = armas.iterator();
        while (i.hasNext()) {
            Arma arma = (Arma) i.next();
            this.out.println(arma.getColor().toString() + ":" + arma.danoRelativo);
        }
        this.out.println("---");
    }
}
