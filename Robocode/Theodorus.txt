package Vingadores;

import java.awt.*;
import java.awt.geom.*;
import java.awt.Color;
import robocode.*;
import robocode.util.*;

public class Theodorus extends AdvancedRobot {
        
        private boolean atirou = false;
        double forcaTiro = 2; // Força do tiro padrão
        double energiaAnteriorInimigo = 100; // Todo oponente começa com 100 de energia.
        double quantidadeTirosErrados = 0; // Quantidade de disparos errados efetuados.
        double direcaoMovimento = 1;
		double rate = 0.5;
		double nrAcertado = 0;
		double nrDesvio,minD = 0,maxD = 1;

        public void run() {
				setAdjustGunForRobotTurn(true);
				setAdjustRadarForGunTurn(true);
                colore(); // Se pintando para a guerra.
                
				setMaxVelocity(Rules.MAX_VELOCITY); // velocidade máxima.
     //           while(true){
                circula(); // Circulando para tentar encontrar inimigos parados.
		//		}
		while(true){
			turnRadarRightRadians(2*Math.PI); // Fica girando o canhão para a direita.
		}
        }
  
        private void circula() {
				setTurnRadarRightRadians(2*Math.PI); // Fica girando o radar para a direita.
        }
  
        private void colore() {
                setBodyColor(Color.BLACK); // Cor do corpo.
                setGunColor(Color.BLUE); // Cor da arma.
                setRadarColor(Color.PINK); // Cor do radar.
                setScanColor(Color.MAGENTA); // Cor do Scanner.
                setBulletColor(Color.CYAN); // Cor da bala.
        }
  
        public void onScannedRobot(ScannedRobotEvent e) {
				if(e.getDistance()>100 || Math.random()*10>Math.PI){
                	setTurnRight(e.getBearing() + 90 - (30 * direcaoMovimento)); // Se posiciona em angulo em relaçao ao inimigo.
				}else{
					setTurnRight(e.getBearing() - 90 + (30 * direcaoMovimento)); // Se posiciona em angulo em relaçao ao inimigo.
				}
                double mudarEnergia = energiaAnteriorInimigo - e.getEnergy(); // Flag que indica se o inimigo atirou.
                if (mudarEnergia > 0 && mudarEnergia <= 3) { // Executado quando o inimigo atira. Inimigo perde de 0 a 3 pontos de energia.
						atirou = true;			
						nrDesvio = minD + (maxD * Math.random());
                       if(Math.random()<rate)
					    direcaoMovimento = -direcaoMovimento;
                        setAhead((e.getDistance()/3 + 100 + 100*nrDesvio) * direcaoMovimento); // Se move pra frente desviando.    
						if(Math.random()>0.7){
						if(nrDesvio < (maxD-0.1)){
							maxD -= 0.7*Math.random();
						}
						if(nrDesvio > (minD+0.1)){
							minD += 0.07*Math.random();
						}
						}
						if(nrAcertado>0){
						nrAcertado -= 1; 
						}
                }
		//	if(atirou){	
	                if (quantidadeTirosErrados < 5) {
	                   Mira(e);
	                } else {
	                        quantidadeTirosErrados = 0; // Zera os erros.
	                        circula(); // Está na hora de circular novamente.
	                }
	                energiaAnteriorInimigo = e.getEnergy(); // Verifica com quanto de energia ficou o inimigo. 
	        }
      //  }
        public void onBulletMissed(BulletMissedEvent e) {
                quantidadeTirosErrados++; // Conta a quantidade de tiros errados.
        }
        
        public void onBulletHit(BulletHitEvent e) {
                quantidadeTirosErrados = 0; // Zera a quantidade de erros.
        }
  
        public void onWin(WinEvent e) {
                setRadarColor(Color.RED); // Cor do radar.
                for (int i = 1; i <= 360; i++) {
                        turnGunRight(i); // Fica girando o canhão em comemoração a vitória.
                        turnLeft(i); // Gira o Corpo para esquerda.
                }
        }
  

	
        public void onHitWall(HitWallEvent e) {

			   direcaoMovimento *= -1;

        }
        public void onHitByBullet(HitByBulletEvent e) {	
			nrAcertado += 2;
			if(nrAcertado>9){
				rate = Math.random();
				nrAcertado = 0;
			}
			if (maxD<1&&minD>0){
			if(nrDesvio<minD + 0.1555555){
				double temp = 0.0676890*Math.random();
				minD -= temp;
				maxD += temp;
			}
			if(nrDesvio>maxD - 0.1555555){
				double temp = 0.0676890*Math.random();
				maxD += temp;
				minD -= temp;
			}
			}
		}	        

        public void onHitRobot(HitRobotEvent e) {
                if (e.getBearing() > -90 && e.getBearing() <= 90) {
                        setBack(200); // Se afasta pra trás.
                } else {
                        setAhead(200); // Se afasta pra frente.
                }
                circula(); // Circula novamente
        }
		


		private void Mira(ScannedRobotEvent e){
					
		double bulletPower = Math.min(3.0,getEnergy());
		double myX = getX();
		double myY = getY();
		double absoluteBearing = getHeadingRadians() + e.getBearingRadians();
		double enemyX = getX() + e.getDistance() * Math.sin(absoluteBearing);
		double enemyY = getY() + e.getDistance() * Math.cos(absoluteBearing);
		double enemyHeading = e.getHeadingRadians();
		double enemyVelocity = e.getVelocity();
		 
		double deltaTime = 0;
		double battleFieldHeight = getBattleFieldHeight(), 
		       battleFieldWidth = getBattleFieldWidth();
		double predictedX = enemyX, predictedY = enemyY;
		while((++deltaTime) * (20.0 - 3.0 * bulletPower) < 
		      Point2D.Double.distance(myX, myY, predictedX, predictedY)){		
			predictedX += Math.sin(enemyHeading) * enemyVelocity;	
			predictedY += Math.cos(enemyHeading) * enemyVelocity;
			if(	predictedX < 18.0 
				|| predictedY < 18.0
				|| predictedX > battleFieldWidth - 18.0
				|| predictedY > battleFieldHeight - 18.0){
				predictedX = Math.min(Math.max(18.0, predictedX), 
		                    battleFieldWidth - 18.0);	
				predictedY = Math.min(Math.max(18.0, predictedY), 
		                    battleFieldHeight - 18.0);
				break;
			}
		}
		double theta;
		if(Math.random()>.9){
				double alX = Math.random()*(predictedX - getX());
				double alY = Math.random()*(predictedY - getY());
				theta = Utils.normalAbsoluteAngle(Math.atan2(
		    alX, alY));}
		else{
				theta = Utils.normalAbsoluteAngle(Math.atan2(
		    predictedX - getX(),predictedY - getY()));
			}

		setTurnRadarRightRadians(
		    Utils.normalRelativeAngle(absoluteBearing - getRadarHeadingRadians()));
		setTurnGunRightRadians(Utils.normalRelativeAngle(theta - getGunHeadingRadians()));
		fire(bulletPower);
		}
  
}